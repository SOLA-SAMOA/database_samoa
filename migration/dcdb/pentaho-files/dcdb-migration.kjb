<?xml version="1.0" encoding="UTF-8"?>
<job>
  <name>dcdb-migration</name>
    <description/>
    <extended_description/>
    <job_version/>
    <job_status>0</job_status>
  <directory>&#47;</directory>
  <created_user>-</created_user>
  <created_date>2012&#47;04&#47;28 09:24:47.826</created_date>
  <modified_user>-</modified_user>
  <modified_date>2012&#47;04&#47;28 09:24:47.826</modified_date>
    <parameters>
    </parameters>
  <connection>
    <name>DCDB</name>
    <server/>
    <type>MSSQL</type>
    <access>ODBC</access>
    <database>DCDB_SQLSERVER</database>
    <port>-1</port>
    <username>sa</username>
    <password>Encrypted 2be98afc86aa7b596ae1ca075c7c3ff8d</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>-1</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>N</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <connection>
    <name>LRS</name>
    <server/>
    <type>MSSQL</type>
    <access>ODBC</access>
    <database>LRS_SQLSERVER</database>
    <port>1521</port>
    <username>sa</username>
    <password>Encrypted 2be98afc86aa7b596ae1ca075c7c3ff8d</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>1521</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>Y</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>Y</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
  <connection>
    <name>SOLA</name>
    <server>localhost</server>
    <type>POSTGRESQL</type>
    <access>Native</access>
    <database>sola</database>
    <port>5432</port>
    <username>postgres</username>
    <password>Encrypted 2be98afc86aa7b4a8842a9d228ec3fe9e</password>
    <servername/>
    <data_tablespace/>
    <index_tablespace/>
    <attributes>
      <attribute><code>FORCE_IDENTIFIERS_TO_LOWERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>FORCE_IDENTIFIERS_TO_UPPERCASE</code><attribute>N</attribute></attribute>
      <attribute><code>IS_CLUSTERED</code><attribute>N</attribute></attribute>
      <attribute><code>PORT_NUMBER</code><attribute>5432</attribute></attribute>
      <attribute><code>QUOTE_ALL_FIELDS</code><attribute>N</attribute></attribute>
      <attribute><code>SUPPORTS_BOOLEAN_DATA_TYPE</code><attribute>Y</attribute></attribute>
      <attribute><code>USE_POOLING</code><attribute>N</attribute></attribute>
    </attributes>
  </connection>
    <slaveservers>
    </slaveservers>
<job-log-table><connection/>
<schema/>
<table/>
<size_limit_lines/>
<interval/>
<timeout_days/>
<field><id>ID_JOB</id><enabled>Y</enabled><name>ID_JOB</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>JOBNAME</id><enabled>Y</enabled><name>JOBNAME</name></field><field><id>STATUS</id><enabled>Y</enabled><name>STATUS</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>STARTDATE</id><enabled>Y</enabled><name>STARTDATE</name></field><field><id>ENDDATE</id><enabled>Y</enabled><name>ENDDATE</name></field><field><id>LOGDATE</id><enabled>Y</enabled><name>LOGDATE</name></field><field><id>DEPDATE</id><enabled>Y</enabled><name>DEPDATE</name></field><field><id>REPLAYDATE</id><enabled>Y</enabled><name>REPLAYDATE</name></field><field><id>LOG_FIELD</id><enabled>Y</enabled><name>LOG_FIELD</name></field></job-log-table>
<jobentry-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>JOBNAME</id><enabled>Y</enabled><name>TRANSNAME</name></field><field><id>JOBENTRYNAME</id><enabled>Y</enabled><name>STEPNAME</name></field><field><id>LINES_READ</id><enabled>Y</enabled><name>LINES_READ</name></field><field><id>LINES_WRITTEN</id><enabled>Y</enabled><name>LINES_WRITTEN</name></field><field><id>LINES_UPDATED</id><enabled>Y</enabled><name>LINES_UPDATED</name></field><field><id>LINES_INPUT</id><enabled>Y</enabled><name>LINES_INPUT</name></field><field><id>LINES_OUTPUT</id><enabled>Y</enabled><name>LINES_OUTPUT</name></field><field><id>LINES_REJECTED</id><enabled>Y</enabled><name>LINES_REJECTED</name></field><field><id>ERRORS</id><enabled>Y</enabled><name>ERRORS</name></field><field><id>RESULT</id><enabled>Y</enabled><name>RESULT</name></field><field><id>NR_RESULT_ROWS</id><enabled>Y</enabled><name>NR_RESULT_ROWS</name></field><field><id>NR_RESULT_FILES</id><enabled>Y</enabled><name>NR_RESULT_FILES</name></field><field><id>LOG_FIELD</id><enabled>N</enabled><name>LOG_FIELD</name></field><field><id>COPY_NR</id><enabled>N</enabled><name>COPY_NR</name></field></jobentry-log-table>
<channel-log-table><connection/>
<schema/>
<table/>
<timeout_days/>
<field><id>ID_BATCH</id><enabled>Y</enabled><name>ID_BATCH</name></field><field><id>CHANNEL_ID</id><enabled>Y</enabled><name>CHANNEL_ID</name></field><field><id>LOG_DATE</id><enabled>Y</enabled><name>LOG_DATE</name></field><field><id>LOGGING_OBJECT_TYPE</id><enabled>Y</enabled><name>LOGGING_OBJECT_TYPE</name></field><field><id>OBJECT_NAME</id><enabled>Y</enabled><name>OBJECT_NAME</name></field><field><id>OBJECT_COPY</id><enabled>Y</enabled><name>OBJECT_COPY</name></field><field><id>REPOSITORY_DIRECTORY</id><enabled>Y</enabled><name>REPOSITORY_DIRECTORY</name></field><field><id>FILENAME</id><enabled>Y</enabled><name>FILENAME</name></field><field><id>OBJECT_ID</id><enabled>Y</enabled><name>OBJECT_ID</name></field><field><id>OBJECT_REVISION</id><enabled>Y</enabled><name>OBJECT_REVISION</name></field><field><id>PARENT_CHANNEL_ID</id><enabled>Y</enabled><name>PARENT_CHANNEL_ID</name></field><field><id>ROOT_CHANNEL_ID</id><enabled>Y</enabled><name>ROOT_CHANNEL_ID</name></field></channel-log-table>
   <pass_batchid>N</pass_batchid>
   <shared_objects_file/>
  <entries>
    <entry>
      <name>START</name>
      <description>A job starts to process here.</description>
      <type>SPECIAL</type>
      <start>Y</start>
      <dummy>N</dummy>
      <repeat>N</repeat>
      <schedulerType>0</schedulerType>
      <intervalSeconds>0</intervalSeconds>
      <intervalMinutes>60</intervalMinutes>
      <hour>12</hour>
      <minutes>0</minutes>
      <weekDay>1</weekDay>
      <DayOfMonth>1</DayOfMonth>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>40</xloc>
      <yloc>47</yloc>
      </entry>
    <entry>
      <name>Copy data to [COURTGRANTREFERENCEPOINT]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[COURTGRANTREFERENCEPOINT]
to:   [SOLA].[COURTGRANTREFERENCEPOINT]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbcourtgrantreferencepoint_to_sola.ktr</filename>
      <transname>copy [DCDB].[COURTGRANTREFERENCEPOINT] to [SOLA]</transname>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>733</xloc>
      <yloc>37</yloc>
      </entry>
    <entry>
      <name>Copy data to [UPGRADEDRSOUTLINEPOLYGON]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[UPGRADEDRSOUTLINEPOLYGON]
to:   [SOLA].[UPGRADEDRSOUTLINEPOLYGON]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbupgradedrsoutlinepolygon_to_sola.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>736</xloc>
      <yloc>136</yloc>
      </entry>
    <entry>
      <name>Copy data to [ROADCENTRELINESEGMENT]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[ROADCENTRELINESEGMENT]
to:   [SOLA].[ROADCENTRELINESEGMENT]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbroadcentrelinesegment_to_sola.ktr</filename>
      <transname>copy [DCDB].[ROADCENTRELINESEGMENT] to [SOLA]</transname>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>386</xloc>
      <yloc>135</yloc>
      </entry>
    <entry>
      <name>Copy data to [HYDROPOLYGON]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[HYDROPOLYGON]
to:   [SOLA].[HYDROPOLYGON]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbhydropolygon_to_sola.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>136</xloc>
      <yloc>138</yloc>
      </entry>
    <entry>
      <name>Copy data to [SURVEYPLANREFERENCEPOINT]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[SURVEYPLANREFERENCEPOINT]
to:   [SOLA].[SURVEYPLANREFERENCEPOINT]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbsurveyplanreferencepoint_to_sola.ktr</filename>
      <transname>copy [DCDB].[SURVEYPLANREFERENCEPOINT] to [SOLA]</transname>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>140</xloc>
      <yloc>221</yloc>
      </entry>
    <entry>
      <name>Copy data to [DCDBPARCELPOLYGON]</name>
      <description>This job entry executes the transformation to copy data
from: [DCDB].[DCDBPARCELPOLYGON]
to:   [SOLA].[DCDBPARCELPOLYGON]</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbdcdbparcelpolygon_to_sola.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>416</xloc>
      <yloc>223</yloc>
      </entry>
    <entry>
      <name>Check Db connections</name>
      <description/>
      <type>CHECK_DB_CONNECTIONS</type>
      <connections>
        <connection>
          <name>DCDB</name>
          <waitfor>0</waitfor>
          <waittime>millisecond</waittime>
        </connection>
        <connection>
          <name>SOLA</name>
          <waitfor>0</waitfor>
          <waittime>millisecond</waittime>
        </connection>
      </connections>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>185</xloc>
      <yloc>46</yloc>
      </entry>
    <entry>
      <name>Prepare Target DB</name>
      <description/>
      <type>SQL</type>
      <sql>-- Recreate the staging schema used for the DCDB Migration and create
-- the necessary migration tables. 

DROP SCHEMA IF EXISTS SamoaView CASCADE;

CREATE SCHEMA SamoaView;


CREATE TABLE SamoaView.ROADNAME
(
  roadNameID INTEGER
, fullRoadName VARCHAR(25)
, SW_MEMBER INTEGER
)
;

CREATE TABLE SamoaView.COURTGRANTREFERENCEPOINT
(
  courtGrantId INTEGER
, parcelNumber VARCHAR(10)
, flurID INTEGER
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.UPGRADEDRSOUTLINEPOLYGON
(
  rsSheetReference VARCHAR(10)
, &quot;operator&quot; VARCHAR(15)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.ROADCENTRELINESEGMENT
(
  roadCLid INTEGER
, roadNameID INTEGER
, label VARCHAR(25)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.ROADPOLYGON
(
  roadPolyID INTEGER
, roadNameID INTEGER
, dedicationReference VARCHAR(25)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.HYDROPOLYGON
(
  hydroID INTEGER
, label VARCHAR(25)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.SURVEYPLANREFERENCEPOINT
(
  planID INTEGER
, planNumber VARCHAR(10)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

CREATE TABLE SamoaView.DCDBPARCELPOLYGON
(
  parcelID INTEGER
, parcelNumber VARCHAR(20)
, planNumber VARCHAR(50)
, flurID INTEGER
, hectares NUMERIC(20, 4)
, creationInstrument INTEGER
, LRreference VARCHAR(12)
, otherReference VARCHAR(12)
, legalityNote VARCHAR(25)
, updateflag VARCHAR(20)
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, areaQuality NUMERIC(22, 4)
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
, title_ref VARCHAR(100)
)
;

CREATE TABLE SamoaView.FLURPOLYGON
(
  flurID INTEGER
, flurNumber VARCHAR(10)
, districtID INTEGER
, MI_STYLE VARCHAR(254)
, SW_MEMBER INTEGER
, encoded_geom  TEXT
, sw_geometry GEOMETRY DEFAULT NULL
, sola_id UUID DEFAULT uuid_generate_v1()
)
;

</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>SOLA</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>351</xloc>
      <yloc>45</yloc>
      </entry>
    <entry>
      <name>Create Geometries</name>
      <description/>
      <type>SQL</type>
      <sql>-- Create the PostGIS geometry for each WKB migrated from the DCDB. 
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);

UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);


UPDATE SamoaView.hydropolygon
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);


UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);

UPDATE SamoaView.roadpolygon
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);


UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);


UPDATE SamoaView.upgradedrsoutlinepolygon
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);


UPDATE SamoaView.flurpolygon
SET sw_geometry = GeomFromWKB(decode(encoded_geom, &apos;base64&apos;), 32702);</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>SOLA</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>837</xloc>
      <yloc>331</yloc>
      </entry>
    <entry>
      <name>Validate and Clean (SOLA)</name>
      <description/>
      <type>SQL</type>
      <sql>-- Validates the spatial data migrated from DCDB into the PostgreSQL SOLA database. 
-- Any records causing Error messages are excluded from migration. 
-- Records with Warning messages will still be migrated. 

-- Create Utility function to assist with validations
CREATE OR REPLACE FUNCTION array_sort (ANYARRAY)
RETURNS ANYARRAY LANGUAGE SQL
AS &apos;SELECT ARRAY(
    SELECT TRIM($1[s.i]) AS &quot;foo&quot;
    FROM
        generate_series(array_lower($1,1), array_upper($1,1)) AS s(i)
    ORDER BY foo DESC)&apos;
;


-- Rationalize the parcel numbers and plannumbers to make sure the combination are unique. Mark parcels with
-- problematic numbers for QC checking.
BEGIN;
UPDATE SamoaView.dcdbparcelpolygon 
SET parcelnumber = CASE WHEN parcelnumber IS NULL THEN &apos;(QC &apos; || CAST(sw_member AS VARCHAR(20)) || &apos;)&apos;
                   ELSE TRIM(parcelnumber) END, 
    plannumber = CASE WHEN plannumber IS NULL THEN &apos;(QC &apos; || CAST(sw_member AS VARCHAR(20)) || &apos;)&apos;
                 ELSE TRIM(plannumber) END; 
COMMIT;                  


BEGIN; 
SELECT public.log_msg(&apos;Warning: Parcel with multiple plans: &apos; || plannumber 
  || &apos; assigned plan number: &apos; || ((array_sort(regexp_split_to_array(plannumber, E&apos;,+&apos;)))[1]), sw_member, &apos;WARN_MULTI_PLAN_NUM&apos;)
FROM SamoaView.dcdbparcelpolygon 
WHERE plannumber LIKE &apos;%,%&apos;; 
COMMIT;

BEGIN;
UPDATE SamoaView.dcdbparcelpolygon 
SET plannumber = (array_sort(regexp_split_to_array(plannumber, E&apos;,+&apos;)))[1] 
WHERE plannumber LIKE &apos;%,%&apos;; 

-- Manual updates that are not set correctly by the bulk update. 
UPDATE SamoaView.dcdbparcelpolygon 
SET plannumber = &apos;2410&apos;
WHERE sw_member = 31820; 

UPDATE SamoaView.dcdbparcelpolygon 
SET plannumber = &apos;4049&apos;
WHERE sw_member = 29255;

UPDATE SamoaView.dcdbparcelpolygon 
SET plannumber = &apos;2856L&apos;
WHERE sw_member = 27326;

UPDATE SamoaView.dcdbparcelpolygon 
SET plannumber = &apos;4185L&apos;
WHERE sw_member = 26173;
COMMIT;

-- Determine the likely title reference for each parcel. Remove Lot Pt and .
BEGIN;
UPDATE SamoaView.dcdbparcelpolygon 
SET title_ref = TRIM(regexp_replace(parcelnumber, &apos;LOT|Lot|lot|\.&apos;, &apos;&apos;, &apos;g&apos;)) || &apos;&#47;&apos; || TRIM(regexp_replace(plannumber, &apos;L&apos;, &apos;&apos;))
WHERE LEFT(plannumber, 3) != &apos;(QC&apos;
AND LEFT(parcelnumber, 3) != &apos;(QC&apos;;

-- Remove the unknown characters where the label matches the format &lt;lot&gt;&#47;&lt;unknown&gt;&#47;&lt;plan&gt;
UPDATE SamoaView.dcdbparcelpolygon 
SET title_ref = (SELECT  TRIM(a[1]) || &apos;&#47;&apos; || TRIM(a[3]) 
				 FROM (SELECT regexp_split_to_array(SamoaView.dcdbparcelpolygon.title_ref, &apos;&#47;&apos;)
				) AS dt(a)) 
WHERE  title_ref like &apos;%&#47;%&#47;%&apos;;
COMMIT;  

-- Check for duplicate parcel &#47; plannumbers
UPDATE SamoaView.dcdbparcelpolygon SET plannumber = plannumber || &apos; (QC &apos; || CAST(sw_member AS VARCHAR(20)) || &apos;)&apos;
WHERE parcelnumber || &apos; &apos; || plannumber IN 
(SELECT parcelnumber || &apos; &apos; || plannumber FROM SamoaView.dcdbparcelpolygon GROUP BY 1 HAVING COUNT(1) &gt; 1);
COMMIT; 

BEGIN;
SELECT public.log_msg(&apos;Warning: Missing Parcel Number - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;WARN_MISSING_PARCEL_NUM&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE LEFT(parcelnumber, 3) = &apos;(QC&apos;;
COMMIT;

BEGIN;
SELECT public.log_msg(&apos;Warning: Missing Plan Number - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;WARN_MISSING_PLAN_NUM&apos;)
FROM SamoaView.dcdbparcelpolygon 
WHERE LEFT(plannumber, 3) = &apos;(QC&apos;
AND LEFT(parcelnumber, 3) != &apos;(QC&apos;;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Duplicated Parcel&#47;Plan Number - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;WARN_DUP_PARCEL_PLAN_NUM&apos;)
FROM SamoaView.dcdbparcelpolygon 
WHERE plannumber LIKE &apos;%(QC%&apos;
AND LEFT(plannumber, 3) != &apos;(QC&apos;
AND LEFT(parcelnumber, 3) != &apos;(QC&apos;;
COMMIT;




-- Validate Parcel Geometry
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Parcel Geometry - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;MISSING_PARCEL_GEOM&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Parcel Geometry - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;INVALID_PARCEL_GEOM&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Parcel geometry contains multiple geometry rings (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber
 || &apos;. Parcel has been split into its component parts.&apos;, sw_member, &apos;MULTI_PARCEL_GEOM&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 

BEGIN;
INSERT INTO SamoaView.dcdbparcelpolygon (parcelid, parcelnumber, plannumber, hectares, title_ref, sw_member, sw_geometry)
SELECT parcelid, parcelnumber, plannumber || &apos; (&apos; || chr(n + 64) || &apos;)&apos;, hectares, title_ref, sw_member, ST_GeometryN(sw_geometry, n)
FROM SamoaView.dcdbparcelpolygon CROSS JOIN generate_series(1,20) n
WHERE sw_geometry IS NOT NULL
AND n &lt;= ST_NumGeometries(sw_geometry)
AND ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1;

UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = NULL
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;

-- Make there are no collection geometries. 
UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = ST_GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;  
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Geometry type should be POLYGON, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;INVALID_GEOM_TYPE&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Parcel is not in a valid location - &apos; || parcelnumber || &apos;&#47;&apos; || plannumber, sw_member, &apos;WARN_INVALID_LOCATION&apos;)
FROM SamoaView.dcdbparcelpolygon
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.dcdbparcelpolygon
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;
 

-- Validate Hydro Geometry
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Hydro Geometry - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;MISSING_HYDRO_GEOM&apos;)
FROM SamoaView.hydropolygon
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Hydro Geometry - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_HYDRO_GEOM&apos;)
FROM SamoaView.hydropolygon
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.hydropolygon
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Hydro geometry contains multiple geometry rings (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || COALESCE(label, &apos;UNNAMED&apos;)
|| &apos;. Hydro has been split into its component parts.&apos; , sw_member, &apos;MULTI_HYDRO_GEOM&apos;)
FROM SamoaView.hydropolygon
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 

BEGIN;
INSERT INTO SamoaView.hydropolygon (hydroid, label, sw_member, sw_geometry)
SELECT hydroid, label, sw_member, ST_GeometryN(sw_geometry, n)
FROM SamoaView.hydropolygon CROSS JOIN generate_series(1,20) n
WHERE sw_geometry IS NOT NULL
AND n &lt;= ST_NumGeometries(sw_geometry)
AND ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1; 

UPDATE SamoaView.hydropolygon
SET sw_geometry = NULL
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;

-- Make there are no collection geometries. 
UPDATE SamoaView.hydropolygon
SET sw_geometry = ST_GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;   
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Hydro geometry type should be POLYGON, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_HYDRO_GEOM_TYPE&apos;)
FROM SamoaView.hydropolygon
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.hydropolygon
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Hydro is not in a valid location - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_HYDRO_LOCATION&apos;)
FROM SamoaView.hydropolygon
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.hydropolygon
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;
 

-- Validate Road Polygon Geometry
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Road Geometry - &apos; || COALESCE(dedicationreference, &apos;UNNAMED&apos;), sw_member, &apos;MISSING_ROAD_GEOM&apos;)
FROM SamoaView.roadpolygon
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Road Geometry - &apos; || COALESCE(dedicationreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_ROAD_GEOM&apos;)
FROM SamoaView.roadpolygon
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.roadpolygon
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Road geometry contains multiple geometry rings (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || COALESCE(dedicationreference, &apos;UNNAMED&apos;)
|| &apos;. Road has been split into its component parts.&apos; , sw_member, &apos;MULTI_ROAD_GEOM&apos;)
FROM SamoaView.roadpolygon
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 

BEGIN;
INSERT INTO SamoaView.roadpolygon (roadpolyid, dedicationreference, sw_member, sw_geometry)
SELECT roadpolyid, dedicationreference, sw_member, ST_GeometryN(sw_geometry, n)
FROM SamoaView.roadpolygon CROSS JOIN generate_series(1,20) n
WHERE sw_geometry IS NOT NULL
AND n &lt;= ST_NumGeometries(sw_geometry)
AND ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1; 

UPDATE SamoaView.roadpolygon
SET sw_geometry = NULL
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;

-- Make there are no collection geometries. 
UPDATE SamoaView.roadpolygon
SET sw_geometry = ST_GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;  
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Road geometry type should be POLYGON, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || COALESCE(dedicationreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_ROAD_GEOM_TYPE&apos;)
FROM SamoaView.roadpolygon
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.roadpolygon
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Road is not in a valid location - &apos; || COALESCE(dedicationreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_ROAD_LOCATION&apos;)
FROM SamoaView.roadpolygon
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.roadpolygon
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;
 



-- Validate Road Centerline
BEGIN;
UPDATE SamoaView.roadcentrelinesegment
SET label =  TRIM(UPPER(COALESCE(label, &apos;ROAD&apos;)));  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Missing RCL Geometry - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;MISSING_RCL_GEOM&apos;)
FROM SamoaView.roadcentrelinesegment
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid RCL Geometry - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RCL_GEOM&apos;)
FROM SamoaView.roadcentrelinesegment
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: RCL geometry contains multiple geometry segments (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || COALESCE(label, &apos;UNNAMED&apos;) ||
&apos;. RoadCL has been split into its component parts.&apos;, sw_member, &apos;MULTI_RCL_GEOM&apos;)
FROM SamoaView.roadcentrelinesegment
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 



BEGIN;
INSERT INTO SamoaView.roadcentrelinesegment (roadclid, roadnameid, label, sw_member, sw_geometry)
SELECT roadclid, roadnameid, label, sw_member, ST_GeometryN(sw_geometry, n)
FROM SamoaView.roadcentrelinesegment CROSS JOIN generate_series(1,20) n
WHERE sw_geometry IS NOT NULL
AND n &lt;= ST_NumGeometries(sw_geometry)
AND ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1;


UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = NULL
WHERE sw_geometry IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1;

-- Make there are no collection geometries. 
UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = ST_GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;    
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: RCL geometry type should be LINESTRING, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RCL_GEOM_TYPE&apos;)
FROM SamoaView.roadcentrelinesegment
WHERE GeometryType(sw_geometry) != &apos;LINESTRING&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;LINESTRING&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: RCL is not in a valid location - &apos; || COALESCE(label, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RCL_LOCATION&apos;)
FROM SamoaView.roadcentrelinesegment
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.roadcentrelinesegment
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;




-- Validate Record Sheets
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Record Sheet Geometry - &apos; || COALESCE(rssheetreference, &apos;UNNAMED&apos;), sw_member, &apos;MISSING_RS_GEOM&apos;)
FROM SamoaView.upgradedrsoutlinepolygon
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Record Sheet Geometry - &apos; || COALESCE(rssheetreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RS_GEOM&apos;)
FROM SamoaView.upgradedrsoutlinepolygon
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.upgradedrsoutlinepolygon
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Record Sheet geometry contains multiple geometry rings (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || COALESCE(rssheetreference, &apos;UNNAMED&apos;), sw_member, &apos;MULTI_RS_GEOM&apos;)
FROM SamoaView.upgradedrsoutlinepolygon
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.upgradedrsoutlinepolygon
SET sw_geometry = GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;   
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Record Sheet geometry type should be POLYGON, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || COALESCE(rssheetreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RS_GEOM_TYPE&apos;)
FROM SamoaView.upgradedrsoutlinepolygon
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.upgradedrsoutlinepolygon
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Record Sheet is not in a valid location - &apos; || COALESCE(rssheetreference, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_RS_LOCATION&apos;)
FROM SamoaView.upgradedrsoutlinepolygon
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.upgradedrsoutlinepolygon
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;




-- Validate Survey Plan Reference
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Plan Ref Geometry - &apos; || COALESCE(plannumber, &apos;NO_PLAN_REF&apos;), sw_member, &apos;MISSING_PLAN_REF_GEOM&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Plan Ref Label&apos;, sw_member, &apos;MISSING_PLAN_REF_LABEL&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE plannumber IS NULL
OR TRIM(plannumber) = &apos;&apos;;
COMMIT; 


BEGIN;
UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry =  NULL 
WHERE plannumber IS NULL
OR TRIM(plannumber) = &apos;&apos;; 
COMMIT; 


BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Plan Ref Geometry - &apos; || plannumber, sw_member, &apos;INVALID_PLAN_REF_GEOM&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Plan Ref geometry contains multiple points (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || plannumber, sw_member, &apos;MULTI_PLAN_REF_GEOM&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry = GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;   
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Plan Ref geometry type should be POINT, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || plannumber, sw_member, &apos;INVALID_PLAN_REF_GEOM_TYPE&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE GeometryType(sw_geometry) != &apos;POINT&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POINT&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Plan Ref is not in a valid location - &apos; || plannumber, sw_member, &apos;INVALID_PLAN_REF_LOCATION&apos;)
FROM SamoaView.surveyplanreferencepoint
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.surveyplanreferencepoint
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;



-- Validate Court Grant Ref Point
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Court Grant Geometry - &apos; || COALESCE(parcelnumber, &apos;NO_PARCEL_NUM&apos;), sw_member, &apos;MISSING_CG_GEOM&apos;)
FROM SamoaView.courtgrantreferencepoint
WHERE sw_geometry IS NULL;
COMMIT; 

-- Do not report Missing CG Labels
--BEGIN; 
--SELECT public.log_msg(&apos;Error: Missing Court Grant Label&apos;, sw_member, &apos;MISSING_CG_LABEL&apos;)
--FROM SamoaView.courtgrantreferencepoint
--WHERE parcelnumber IS NULL
--OR TRIM(parcelnumber) = &apos;&apos;;
--COMMIT; 


BEGIN;
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry =  NULL 
WHERE parcelnumber IS NULL
OR TRIM(parcelnumber) = &apos;&apos;; 
COMMIT; 


BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Court Grant Geometry - &apos; || parcelnumber, sw_member, &apos;INVALID_CG_GEOM&apos;)
FROM SamoaView.courtgrantreferencepoint
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Court Grant geometry contains multiple points (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || parcelnumber, sw_member, &apos;MULTI_CG_GEOM&apos;)
FROM SamoaView.courtgrantreferencepoint
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry = GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;   
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Court Grant geometry type should be POINT, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || parcelnumber, sw_member, &apos;INVALID_CG_GEOM_TYPE&apos;)
FROM SamoaView.courtgrantreferencepoint
WHERE GeometryType(sw_geometry) != &apos;POINT&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POINT&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Court Grant is not in a valid location - &apos; || parcelnumber, sw_member, &apos;INVALID_CG_LOCATION&apos;)
FROM SamoaView.courtgrantreferencepoint
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.courtgrantreferencepoint
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;



-- Validate Flur Polygon Geometry
BEGIN; 
SELECT public.log_msg(&apos;Error: Missing Flur Geometry - &apos; || COALESCE(flurnumber, &apos;UNNAMED&apos;), sw_member, &apos;MISSING_FLUR_GEOM&apos;)
FROM SamoaView.flurpolygon
WHERE sw_geometry IS NULL;
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Invalid Flur Geometry - &apos; || COALESCE(flurnumber, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_FLUR_GEOM&apos;)
FROM SamoaView.flurpolygon
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL;
COMMIT;

BEGIN;
UPDATE SamoaView.flurpolygon
SET sw_geometry = NULL
WHERE NOT ST_IsValid(sw_geometry)
AND sw_geometry IS NOT NULL; 
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Warning: Flur geometry contains multiple geometry rings (&apos;|| CAST(ST_NumGeometries(sw_geometry) AS VARCHAR(20)) ||&apos;) - &apos; || COALESCE(flurnumber, &apos;UNNAMED&apos;)
|| &apos;. Flur has been split into its component parts.&apos; , sw_member, &apos;MULTI_FLUR_GEOM&apos;)
FROM SamoaView.flurpolygon
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;
COMMIT; 

BEGIN;
INSERT INTO SamoaView.flurpolygon (flurid, flurnumber, sw_member, sw_geometry)
SELECT flurid, flurnumber, sw_member, ST_GeometryN(sw_geometry, n)
FROM SamoaView.flurpolygon CROSS JOIN generate_series(1,20) n
WHERE sw_geometry IS NOT NULL
AND n &lt;= ST_NumGeometries(sw_geometry)
AND ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1; 

UPDATE SamoaView.flurpolygon
SET sw_geometry = NULL
WHERE ST_NumGeometries(sw_geometry) IS NOT NULL
AND ST_NumGeometries(sw_geometry) &gt; 1
AND sw_geometry IS NOT NULL;

-- Make there are no collection geometries. 
UPDATE SamoaView.flurpolygon
SET sw_geometry = ST_GeometryN(sw_geometry, 1)
WHERE sw_geometry IS NOT NULL
AND GeometryType(sw_geometry) = &apos;GEOMETRYCOLLECTION&apos;;  
COMMIT;

BEGIN; 
SELECT public.log_msg(&apos;Error: Flur geometry type should be POLYGON, but was &apos;|| GeometryType(sw_geometry) ||&apos; - &apos; || COALESCE(flurnumber, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_FLUR_GEOM_TYPE&apos;)
FROM SamoaView.flurpolygon
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL; 
COMMIT;


BEGIN;
UPDATE SamoaView.flurpolygon
SET sw_geometry = NULL
WHERE GeometryType(sw_geometry) != &apos;POLYGON&apos;::text
AND sw_geometry IS NOT NULL;  
COMMIT; 

BEGIN; 
SELECT public.log_msg(&apos;Error: Flur is not in a valid location - &apos; || COALESCE(flurnumber, &apos;UNNAMED&apos;), sw_member, &apos;INVALID_FLUR_LOCATION&apos;)
FROM SamoaView.flurpolygon
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT; 


BEGIN;
UPDATE SamoaView.flurpolygon
SET sw_geometry = NULL
WHERE NOT ST_Intersects(sw_geometry, ST_SetSRID(ST_MakeBox3D(ST_Point(300500, 8439000),ST_Point(461900, 8518000)), 32702))
AND sw_geometry IS NOT NULL;
COMMIT;

</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>SOLA</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>368</xloc>
      <yloc>332</yloc>
      </entry>
    <entry>
      <name>Migrate to SOLA</name>
      <description/>
      <type>SQL</type>
      <sql>-- Moves the cleaned DCDB data from the SamoaView staging tables into the main
-- SOLA database tables. 

-- CLEAR DATABASE TABLES
ALTER TABLE cadastre.spatial_value_area DISABLE TRIGGER ALL;
ALTER TABLE cadastre.spatial_unit DISABLE TRIGGER ALL;
ALTER TABLE cadastre.cadastre_object DISABLE TRIGGER ALL;
DELETE FROM cadastre.spatial_value_area;
DELETE FROM cadastre.spatial_unit;
DELETE FROM cadastre.spatial_unit_historic;
DELETE FROM cadastre.cadastre_object;
DELETE FROM cadastre.cadastre_object_historic;

-- Add Migration DCDB User to link records to
DELETE FROM system.appuser WHERE username = &apos;dcdb-migration&apos;; 
INSERT INTO system.appuser(id, username, first_name, last_name, description, change_user, rowversion)
    VALUES (uuid_generate_v1(), &apos;dcdb-migration&apos;, &apos;DCDB&apos;, &apos;Migration&apos;, &apos;DCDB Migration User&apos;, &apos;dcdb-migration&apos;, 1);
	

--LOAD PARCEL RELATED DATA
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, level_id, change_user, rowversion ) 
	SELECT sola_id, &apos;2D&apos;, title_ref, &apos;onSurface&apos;,  
	(SELECT id FROM cadastre.level WHERE name=&apos;Parcels&apos;) As l_id, &apos;dcdb-migration&apos; AS ch_user, 1  
	FROM SamoaView.dcdbparcelpolygon
	WHERE sw_geometry IS NOT NULL;

DELETE FROM transaction.transaction WHERE id = &apos;dcdb-migration&apos;;
INSERT INTO transaction.transaction(id, status_code, approval_datetime, change_user) VALUES(&apos;dcdb-migration&apos;, &apos;approved&apos;, now(), &apos;dcdb-migration&apos;);

INSERT INTO cadastre.cadastre_object (id, name_firstpart, name_lastpart, source_reference, transaction_id, status_code, geom_polygon, change_user, rowversion )
	SELECT sola_id, parcelnumber, plannumber, &apos;DCDB&apos;, &apos;dcdb-migration&apos;, &apos;current&apos;, sw_geometry, &apos;dcdb-migration&apos;, 1
	FROM SamoaView.dcdbparcelpolygon
	WHERE sw_geometry IS NOT NULL;

INSERT INTO cadastre.spatial_value_area (spatial_unit_id, type_code, size, change_user, rowversion)
	SELECT 	sola_id, &apos;officialArea&apos;, hectares * 10000, &apos;dcdb-migration&apos; AS ch_user, 1 as rowver
	FROM SamoaView.dcdbparcelpolygon
	WHERE sw_geometry IS NOT NULL AND hectares IS NOT NULL;


--INSERT VALUES FOR THE SAMOA Hydro Features
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, geom, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, UPPER(label), &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Hydro Features&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.hydropolygon WHERE sw_geometry IS NOT NULL;
	
--INSERT VALUES FOR THE SAMOA Road Polygons Features
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, geom, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, UPPER(dedicationreference), &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Roads&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.roadpolygon WHERE sw_geometry IS NOT NULL;

-- ROAD CENTRELINE DATA
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, geom, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, UPPER(label), &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Road Centerlines&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.roadcentrelinesegment WHERE sw_geometry IS NOT NULL;


--INSERT VALUES FOR THE SAMOA Record Sheets
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, geom, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, rssheetreference, &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Record Sheets&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.upgradedrsoutlinepolygon WHERE sw_geometry IS NOT NULL;


--INSERT VALUES FOR THE SAMOA SURVEY PLAN REFERENCE POINTS
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, reference_point, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, plannumber, &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Survey Plans&apos;) As l_id, &apos;dcdb-migration&apos;, 1
	FROM SamoaView.surveyplanreferencepoint WHERE sw_geometry IS NOT NULL;


--INSERT VALUES FOR THE SAMOA COURT GRANT REFERENCE POINTS
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, reference_point, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, parcelnumber, &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Court Grants&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.courtgrantreferencepoint WHERE sw_geometry IS NOT NULL;

--INSERT VALUES FOR THE SAMOA FLUR POLYGONS
INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, geom, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, flurnumber, &apos;onSurface&apos;, sw_geometry, (SELECT id FROM cadastre.level WHERE name=&apos;Flur&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM SamoaView.flurpolygon WHERE sw_geometry IS NOT NULL;


--INSERT VALUES FOR THE SAMOA ISLANDS
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterIslands&quot; 
	DROP COLUMN IF EXISTS sola_id;
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterIslands&quot; 
	ADD sola_id uuid;
UPDATE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterIslands&quot; 
	SET sola_id = uuid_generate_v1();

INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, reference_point, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, name, &apos;onSurface&apos;, the_geom, (SELECT id FROM cadastre.level WHERE name=&apos;Islands&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterIslands&quot; WHERE the_geom IS NOT NULL;



--INSERT VALUES FOR THE SAMOA LAND DISTRICTS
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterLandDistricts&quot; 
	DROP COLUMN IF EXISTS sola_id;
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterLandDistricts&quot; 
	ADD sola_id uuid;
UPDATE &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterLandDistricts&quot; 
	SET sola_id = uuid_generate_v1();

INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, reference_point, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, name, &apos;onSurface&apos;, the_geom, (SELECT id FROM cadastre.level WHERE name=&apos;Districts&apos;) As l_id, &apos;dcdb-migration&apos;, 1  
	FROM &quot;SamoaPlaceNames&quot;.&quot;SamoaGPNGazzetterLandDistricts&quot; WHERE the_geom IS NOT NULL;



--INSERT VALUES FOR THE SAMOA VILLAGES
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaVillageNamesPoint_SMG&quot; 
	DROP COLUMN IF EXISTS sola_id;
ALTER TABLE &quot;SamoaPlaceNames&quot;.&quot;SamoaVillageNamesPoint_SMG&quot; 
	ADD sola_id uuid;
UPDATE &quot;SamoaPlaceNames&quot;.&quot;SamoaVillageNamesPoint_SMG&quot; 
	SET sola_id = uuid_generate_v1();

INSERT INTO cadastre.spatial_unit (id, dimension_code, label, surface_relation_code, reference_point, level_id, change_user, rowversion) 
	SELECT sola_id, &apos;2D&apos;, viname, &apos;onSurface&apos;, the_geom, (SELECT id FROM cadastre.level WHERE name=&apos;Villages&apos;) As l_id, &apos;dcdb-migration&apos;, 1 
	FROM &quot;SamoaPlaceNames&quot;.&quot;SamoaVillageNamesPoint_SMG&quot; WHERE the_geom IS NOT NULL;


--Reset Trigger
ALTER TABLE cadastre.spatial_value_area ENABLE TRIGGER ALL;
ALTER TABLE cadastre.spatial_unit ENABLE TRIGGER ALL;
ALTER TABLE cadastre.cadastre_object ENABLE TRIGGER ALL;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>SOLA</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>74</xloc>
      <yloc>326</yloc>
      </entry>
    <entry>
      <name>Create Validation Log</name>
      <description/>
      <type>SQL</type>
      <sql>-- Create log table to capture validation issues 
CREATE TABLE IF NOT EXISTS public.dcdb_migration_log
(
  run integer DEFAULT NULL, 
  msg_time timestamp without time zone NOT NULL DEFAULT now(),
  msg varchar(500),
  num int, 
  msg_group varchar(50)
);


-- Set the Run Number in the log for the previous run. 
UPDATE public.dcdb_migration_log 
SET run = (SELECT (MAX(COALESCE(run, 0)) + 1) FROM public.dcdb_migration_log)
WHERE run IS NULL;


CREATE OR REPLACE FUNCTION public.log_msg (msg varchar(500), num int, msg_group varchar(50)) RETURNS void
 AS &apos;
DECLARE 
BEGIN
INSERT INTO public.dcdb_migration_log (msg, num, msg_group)
VALUES (msg, num, msg_group);
END; &apos;
  LANGUAGE plpgsql;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>SOLA</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>675</xloc>
      <yloc>332</yloc>
      </entry>
    <entry>
      <name>Extract Validation Log</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}&#47;extract_validation_log.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>210</xloc>
      <yloc>328</yloc>
      </entry>
    <entry>
      <name>Validate DCDB and Log</name>
      <description>
</description>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}&#47;validate_dcdb.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>517</xloc>
      <yloc>332</yloc>
      </entry>
    <entry>
      <name>Fix Invalid Geoms</name>
      <description/>
      <type>SQL</type>
      <sql>-- Fixes invalid geometries in the temp tables
UPDATE dbo.tmpParcelbinaryExport
SET ogcbinary = geometry::STGeomFromWKB(ogcbinary, 32702).MakeValid().STAsBinary()
WHERE  geometry::STGeomFromWKB(ogcbinary, 32702).STIsValid() = 0;


UPDATE dbo.tmpHydrobinaryExport
SET ogcbinary = geometry::STGeomFromWKB(ogcbinary, 32702).MakeValid().STAsBinary()
WHERE  geometry::STGeomFromWKB(ogcbinary, 32702).STIsValid() = 0;


UPDATE dbo.tmproadcentrelinebinaryexport
SET ogcbinary = geometry::STGeomFromWKB(ogcbinary, 32702).MakeValid().STAsBinary()
WHERE  geometry::STGeomFromWKB(ogcbinary, 32702).STIsValid() = 0;

UPDATE dbo.tmproadbinaryexport
SET ogcbinary = geometry::STGeomFromWKB(ogcbinary, 32702).MakeValid().STAsBinary()
WHERE  geometry::STGeomFromWKB(ogcbinary, 32702).STIsValid() = 0;

UPDATE dbo.[tmpFlurPolygonbinaryExport]
SET ogcbinary = geometry::STGeomFromWKB(ogcbinary, 32702).MakeValid().STAsBinary()
WHERE  geometry::STGeomFromWKB(ogcbinary, 32702).STIsValid() = 0;</sql>
      <useVariableSubstitution>F</useVariableSubstitution>
      <sqlfromfile>F</sqlfromfile>
      <sqlfilename/>
      <sendOneStatement>F</sendOneStatement>
      <connection>DCDB</connection>
      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>497</xloc>
      <yloc>41</yloc>
      </entry>
    <entry>
      <name>Copy data to [ROADPOLYGON]</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}\copy_dcdbroadpolygon_to_sola.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>637</xloc>
      <yloc>227</yloc>
      </entry>
    <entry>
      <name>Copy data to [FLURPOLYGON]</name>
      <description/>
      <type>TRANS</type>
      <specification_method>filename</specification_method>
      <trans_object_id/>
      <filename>${Internal.Job.Filename.Directory}&#47;copy_dcdbflurpolygon_to_sola.ktr</filename>
      <transname/>
      <arg_from_previous>N</arg_from_previous>
      <params_from_previous>N</params_from_previous>
      <exec_per_row>N</exec_per_row>
      <clear_rows>N</clear_rows>
      <clear_files>N</clear_files>
      <set_logfile>N</set_logfile>
      <logfile/>
      <logext/>
      <add_date>N</add_date>
      <add_time>N</add_time>
      <loglevel>Basic</loglevel>
      <cluster>N</cluster>
      <slave_server_name/>
      <set_append_logfile>N</set_append_logfile>
      <wait_until_finished>Y</wait_until_finished>
      <follow_abort_remote>N</follow_abort_remote>
      <create_parent_folder>N</create_parent_folder>
      <parameters>        <pass_all_parameters>Y</pass_all_parameters>
      </parameters>      <parallel>N</parallel>
      <draw>Y</draw>
      <nr>0</nr>
      <xloc>833</xloc>
      <yloc>228</yloc>
      </entry>
  </entries>
  <hops>
    <hop>
      <from>Copy data to [COURTGRANTREFERENCEPOINT]</from>
      <to>Copy data to [UPGRADEDRSOUTLINEPOLYGON]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [UPGRADEDRSOUTLINEPOLYGON]</from>
      <to>Copy data to [ROADCENTRELINESEGMENT]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [SURVEYPLANREFERENCEPOINT]</from>
      <to>Copy data to [DCDBPARCELPOLYGON]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Check Db connections</from>
      <to>Prepare Target DB</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>START</from>
      <to>Check Db connections</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>Y</unconditional>
    </hop>
    <hop>
      <from>Extract Validation Log</from>
      <to>Migrate to SOLA</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Validate and Clean (SOLA)</from>
      <to>Extract Validation Log</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [ROADCENTRELINESEGMENT]</from>
      <to>Copy data to [HYDROPOLYGON]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [HYDROPOLYGON]</from>
      <to>Copy data to [SURVEYPLANREFERENCEPOINT]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create Geometries</from>
      <to>Create Validation Log</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Create Validation Log</from>
      <to>Validate DCDB and Log</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Validate DCDB and Log</from>
      <to>Validate and Clean (SOLA)</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Prepare Target DB</from>
      <to>Fix Invalid Geoms</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Fix Invalid Geoms</from>
      <to>Copy data to [COURTGRANTREFERENCEPOINT]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [DCDBPARCELPOLYGON]</from>
      <to>Copy data to [ROADPOLYGON]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [ROADPOLYGON]</from>
      <to>Copy data to [FLURPOLYGON]</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
    <hop>
      <from>Copy data to [FLURPOLYGON]</from>
      <to>Create Geometries</to>
      <from_nr>0</from_nr>
      <to_nr>0</to_nr>
      <enabled>Y</enabled>
      <evaluation>Y</evaluation>
      <unconditional>N</unconditional>
    </hop>
  </hops>
  <notepads>
    <notepad>
      <note>NOTE: To acess a Transformation step 
(i.e. step with 4 arrows) right click the
step and choose Open transformation.</note>
      <xloc>320</xloc>
      <yloc>446</yloc>
      <width>247</width>
      <heigth>55</heigth>
      <fontname>Arial</fontname>
      <fontsize>10</fontsize>
      <fontbold>N</fontbold>
      <fontitalic>N</fontitalic>
      <fontcolorred>0</fontcolorred>
      <fontcolorgreen>0</fontcolorgreen>
      <fontcolorblue>0</fontcolorblue>
      <backgroundcolorred>255</backgroundcolorred>
      <backgroundcolorgreen>165</backgroundcolorgreen>
      <backgroundcolorblue>0</backgroundcolorblue>
      <bordercolorred>100</bordercolorred>
      <bordercolorgreen>100</bordercolorgreen>
      <bordercolorblue>100</bordercolorblue>
      <drawshadow>Y</drawshadow>
    </notepad>
  </notepads>
</job>
